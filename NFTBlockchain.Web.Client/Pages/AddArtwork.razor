@page "/AddArtwork"
@using NFTBlockchain.Infrastructure.Interfaces
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Color = MudBlazor.Color
@using Severity = MudBlazor.Severity
@attribute [Authorize]

@inject IArtworkService ArtworkService
@inject UserManager UserManager
@inject NavigationManager Navigator


<MudText Typo="Typo.h4">Добавить произведение искусства</MudText>
<MudGrid Class="mt-5">
    <MudItem xs="12" md="4">
        <MudCard>
            @if (_errorMessage is not null)
            {
                <MudAlert Severity="Severity.Error">Ошибка: @_errorMessage</MudAlert>
            }
            <MudCardContent>
                <MudForm @bind-IsValid="@_isValid" @ref="@_form" Model="@_model">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="@_model.Title" For="@(() => _model.Title)" Label="Название произведения"/>
                    <MudFileUpload Class="mt-5" T="IBrowserFile" @bind-Files="@_model.File" For="@(() => _model.File)" Accept=".jpg, .png, .gif, .jpeg, .webp,">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Выберите файл
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (_model.File is not null)
                    {
                        <MudText Typo="Typo.body2">Выбран файл @_model.File.Name</MudText>
                    }
                    
                    <MudFileUpload Class="mt-5" T="IBrowserFile" @bind-Files="@_model.PrivateKey" For="@(() => _model.PrivateKey)" Accept=".pem">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Выберите секретный ключ
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (_model.PrivateKey is not null)
                    {
                        <MudText Typo="Typo.body2">Выбран файл ключа @_model.PrivateKey.Name</MudText>
                    }
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton OnClick="@OnSubmit" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Image" Color="Color.Primary">Зарегистрировать</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    private bool _isValid;

    private string? _errorMessage;

    private ApplicationUser _user;

    private MudForm _form;

    private FormModel _model { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _user = await UserManager.GetAuthenticatedUserAsync();
            StateHasChanged();
        }
    }

    private async Task OnSubmit()
    {
        await _form.Validate();
        if (_isValid)
        {
            _errorMessage = FileNameValidator.Validate(_model.File).FirstOrDefault();
            if (_errorMessage is not null)
                return;

            _errorMessage = PrivateKeyValidator.Validate(_model.PrivateKey).FirstOrDefault();
            if (_errorMessage is not null)
                return;

            var reader = new StreamReader(_model.PrivateKey.OpenReadStream());
            var privateKey = await reader.ReadToEndAsync();
            
            (_errorMessage, var hash) = await ArtworkService.RegisterArtwork(_model.File.OpenReadStream(), _model.Title, privateKey, _user);
            if (_errorMessage is null)
            {
                Navigator.NavigateTo($"/Artwork/{hash}");
            }
        }
    }
    
    private class FormModel
    {
        [Required(ErrorMessage = "Введите название произведения")]
        [StringLength(500, MinimumLength = 2)]
        public string Title { get; set; }
        
        [Required(ErrorMessage = "Выберите файл произведения")]
        public IBrowserFile File { get; set; }
        
        [Required(ErrorMessage = "Выберите ваш секретный ключ")]
        public IBrowserFile PrivateKey { get; set; }
    }
    
    private static class FileNameValidator
    {
        public static readonly string[] AcceptedMimeTypes = ["image/gif", "image/jpeg", "image/png", "image/webp"];
        
        public static IEnumerable<string> Validate(IBrowserFile file)
        {
            if (!AcceptedMimeTypes.Contains(file.ContentType))
            {
                yield return "Неверное расширение файла, допустимые: jpg, png, gif, webp";
            }
        }
    }
    
    private static class PrivateKeyValidator
    {
        public static IEnumerable<string> Validate(IBrowserFile file)
        {
            if (!file.Name.EndsWith(".pem"))
            {
                yield return "Неверное расширение файла, допустимые: .pem";
            }
        }
    }
    
}